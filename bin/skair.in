#! /usr/bin/env bash
#------------------------------------------------------------------------------#
# Script to generate LLVM IR from input source.
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
# Usage
#------------------------------------------------------------------------------#

usage() {
cat << EOF
Usage: $0 options <input file>

This script compiles the given input file into LLVM IR.

Options:
   -h  Show this message.
   -o  Specify the output file name (default is 'input'.ll).

Pass-through compiler options:
	-I  Specify the search path (multiple pathes may be specified)
	-D  Specify a define (multiple defines may be specified)
	-W  Specify a warning option (multiple options may be specified)
	-m  Specify a machine option (multiple options may be specified)
	-O  Specify the optimization level
	-g  Enable debugging inforamtion

Environment:
   SKAIR_CPPFLAGS  Extra compile flags.
EOF
exit
}

output=""
cppflags=""

[ $# -lt 1 ] && usage

#------------------------------------------------------------------------------#
# Parse command line
#------------------------------------------------------------------------------#

OPTERR=0

while getopts ":hI:D:W:m:O:g:o:" opt ; do
	case $opt in
	h)
		usage
	;;
	O)
		cppflags="$cppflags -O$OPTARG"
	;;
	I)
		cppflags="$cppflags -I$OPTARG"
	;;
	D)
		cppflags="$cppflags -D$OPTARG"
	;;
	W)
		cppflags="$cppflags -W$OPTARG"
	;;
	m)
		cppflags="$cppflags -m$OPTARG"
	;;
	g)
		cppflags="$cppflags -g"
	;;
	o)
		output=$OPTARG
	;;
	esac
done

# advance to first required argument
shift $(($OPTIND - 1))

#------------------------------------------------------------------------------#
# Check for user-supplied compiler flags
#------------------------------------------------------------------------------#

if [ -n "$SKAIR_CPPFLAGS" ] ; then
	cppflags=$SKAIR_CPPFLAGS
elif [ -z "$cppflags" ] ; then
	cppflags="-O2"
fi

cppflags=`echo $cppflags | sed 's,^ ,,'`

#------------------------------------------------------------------------------#
# Parse language type from file suffix.
#------------------------------------------------------------------------------#

ftype=`echo $1 | sed 's,.*\.,,g'`
fbase=`echo $1 | sed 's,\..*$,,g'`

case $ftype in
	f|F|f90|F90)
		cmd=gfortran
	;;
	c|C)
		cmd=gcc
	;;
	cc|CC|cxx)
		cmd=g++
	;;
esac

#------------------------------------------------------------------------------#
# Set the output if the user didn't supply a name
#------------------------------------------------------------------------------#

if [ -z "$output" ] ; then
	output=$fbase.ll
fi

#------------------------------------------------------------------------------#
# Call compiler with dragonegg plugin.
#------------------------------------------------------------------------------#

echo "Generating LLVM IR with:"
echo "$cmd $cppflags -fplugin=@DRAGONEGG@ -fplugin-arg-dragonegg-emit-ir -o $output -S $1"
$cmd $cppflags -fplugin=@DRAGONEGG@ -fplugin-arg-dragonegg-emit-ir -o $output -S $1
