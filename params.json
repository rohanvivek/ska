{"name":"SKA","body":"# What is SKA?\r\n\r\nThe _static kernel analyzer (SKA)_ combines a static, linear\r\npipeline simulator (similar to the IBM _spu\\_timing_ tool)\r\nwith architectural heuristics to model in-order\r\ninstruction issue and pipeline behavior.  Pipeline simulations take as\r\ninput the _intermediate representation (IR)_ from\r\n_Low-Level Virtual Machine (LLVM)_.\r\nLLVM and LLVM IR are adopted\r\nstandards in the HPC community,\r\nallowing SKA to support a wide range of source inputs.  SKA also has\r\nsupport for the upcoming OpenCL\r\n_Standard Portable Intermediate Representation (SPIR)_, which is\r\nbased on LLVM IR version 3.1.  Support for OpenCL kernel source\r\ninput (in the form of SPIR) allows SKA to model a rich variety of\r\nimportant modern computing architectures, and provides users with a\r\nnew paradigm for application optimization and design.\r\n\r\nThe underlying hardware properties accessed by SKA during pipeline\r\nsimulation are user-defined, allowing for both modeling of existing\r\nprocessors, and experimentation with novel resource provisioning.  Thus,\r\nSKA can be employed either as an analysis tool for code optimization, or\r\nas a co-design tool to aid in the creation of new processor\r\nconfigurations.\r\n\r\nUsers can visualize the output of SKA pipeline\r\nsimulations with the _skaview_ program.  The novel view representations in skaview give\r\nthe user both detailed clock-for-clock execution information, as well as\r\nintuitive _slope_ and _graph_ views for high-level detection of serious data\r\nand structural hazards.\r\n\r\n# Pipeline Simulator\r\n\r\nThe primary functionality of ska is as a pipeline simulator of LLVM IR.  The below image shows the an annotated screen shot from skaview:\r\n\r\n![Pipeline Simulation Detail](http://tuxfan.github.com/webdata/ska/images/pipeline.png)\r\n\r\nFrom left to right, this images shows the issue cycle of each instruction, the logic unit on which it executed (including multiple issue flags: D indicates dual-issue), the pipeline progress (dashes represent stalls) and the LLVM IR instruction that was executed.\r\n\r\n# Generating Simulations\r\n\r\nTo create output suitable for viewing in skaview, begin with the source file that you wish to analyze.  In this example, we use a simple _saxpy_ update:\r\n\r\n```C\r\nfor(i=0; i<N; ++i) {\r\n   y[i] = alpha*x[i] + y[i];\r\n} // for\r\n```\r\n\r\nUse the _skair_ script on your source file to generate LLVM IR:\r\n\r\n% skair saxpy.c\r\n\r\nThe _skair_ script is just a wrapper for one of the GNU compilers (gcc, g++ or gfortran) with added flags to use the [dragonegg](http://dragonegg.llvm.org) plugin, so you can add any flags that you need to compile your code, e.g.,\r\n\r\n% skair -O3 -I/usr/include/special -DMY_DEFINE=defined -Wall -msse saxpy.c\r\n\r\nwill just pass the extra flags onto the compiler.\r\n\r\nThe skair script outputs LLVM IR suitable for input into _ska_ (the actual simulator executable).  The IR looks like this:\r\n\r\n```llvm\r\n; ModuleID = 'saxpy.c'\r\ntarget datalayout = \"e-p:64:64:64-S128-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f16:16:16-f32:32:32-f64:64:64-f128:128:128-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\r\ntarget triple = \"x86_64-apple-darwin11\"\r\n\r\ndefine void @saxpy(i32 %n, float %alpha, float* nocapture %x, float* nocapture %y) nounwind uwtable {\r\nentry:\r\n  %0 = icmp sgt i32 %n, 0\r\n  br i1 %0, label %\"3.lr.ph\", label %return\r\n\r\n\"3.lr.ph\":                                        ; preds = %entry\r\n  %1 = bitcast float* %y to i8*\r\n  %2 = bitcast float* %x to i8*\r\n  br label %\"3\"\r\n\r\n\"3\":                                              ; preds = %\"3\", %\"3.lr.ph\"\r\n  %indvars.iv = phi i64 [ 0, %\"3.lr.ph\" ], [ %indvars.iv.next, %\"3\" ]\r\n  %3 = shl nsw i64 %indvars.iv, 2\r\n  %4 = getelementptr inbounds i8* %1, i64 %3\r\n  %5 = getelementptr inbounds i8* %2, i64 %3\r\n  %6 = bitcast i8* %5 to float*\r\n  %7 = load float* %6, align 4, !tbaa !0\r\n  %8 = fmul float %7, %alpha\r\n  %9 = bitcast i8* %4 to float*\r\n  %10 = load float* %9, align 4, !tbaa !0\r\n  %11 = fadd float %8, %10\r\n  store float %11, float* %9, align 4, !tbaa !0\r\n  %indvars.iv.next = add i64 %indvars.iv, 1\r\n  %lftr.wideiv = trunc i64 %indvars.iv.next to i32\r\n  %exitcond = icmp eq i32 %lftr.wideiv, %n\r\n  br i1 %exitcond, label %return, label %\"3\"\r\n\r\nreturn:                                           ; preds = %\"3\", %entry\r\n  ret void\r\n}\r\n\r\n!0 = metadata !{metadata !\"alias set 7: float\", metadata !1}\r\n!1 = metadata !{metadata !1}\r\n```\r\n\r\n\r\nTo generate a simulation, call ska with the LLVM IR:\r\n\r\n% ska -o saxpy.ska k10.xml saxpy.ll\r\n\r\nThis command tells ska to output the simulation to _saxpy.ska_ using AMD's K10 architecture (Supported architectures are in the _architectures_ subdirectory of the main project.)  Once you have generated an output file, you can view it with skaview:\r\n\r\n% skaview saxpy.ska\r\n\r\n# Slope View\r\n\r\nFor a complete, more intuitive view of potential stalls in the pipeline, skaview offers a _slope_ view.  The images below show the main window, and the main window with the slope view window opened:\r\n\r\n![Main Window](http://tuxfan.github.com/webdata/ska/images/main.png)\r\n![Slope Window](http://tuxfan.github.com/webdata/ska/images/slope.png)\r\n\r\nThe slope view plots the pipeline progress as a single-valued function, with a point at the first execution cycle of each instruction. Longer stalls will have nearly zero slope, while multiple issue sections (best) will have up to _-(max issue)_.\r\n\r\n# Graph View\r\n\r\nSometimes it is useful to view a basic block as a _directed acyclic graph (DAG)_. Because LLVM IR is in _static single-assignment (SSA)_ form it is straightforward to create a graph view of the LLVM instruction dependencies. The image below shows a portion of such a graph:\r\n\r\n![Graph Window](http://tuxfan.github.com/webdata/ska/images/graph.png)\r\n\r\n# Metrics\r\n\r\nThe ska simulator collects statistics during a run. These statistics are used to generate several metrics. Both the statistics and metrics can be viewed from within skaview:\r\n\r\n![Metrics](http://tuxfan.github.com/webdata/ska/images/metrics.png)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"The Static Kernel Analyzer (SKA)"}