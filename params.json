{"body":"# What is SKA?\r\n\r\nThe _static kernel analyzer (SKA)_ combines a static, linear\r\npipeline simulator (similar to the IBM _spu\\_timing_ tool)\r\nwith architectural heuristics to model in-order\r\ninstruction issue and pipeline behavior.  Pipeline simulations take as\r\ninput the _intermediate representation (IR)_ from\r\n_Low-Level Virtual Machine (LLVM)_.\r\nLLVM and LLVM IR are adopted\r\nstandards in the HPC community,\r\nallowing SKA to support a wide range of source inputs.  SKA also has\r\nsupport for the upcoming OpenCL\r\n_Standard Portable Intermediate Representation (SPIR)_, which is\r\nbased on LLVM IR version 3.1.  Support for OpenCL kernel source\r\ninput (in the form of SPIR) allows SKA to model a rich variety of\r\nimportant modern computing architectures, and provides users with a\r\nnew paradigm for application optimization and design.\r\n\r\nThe underlying hardware properties accessed by SKA during pipeline\r\nsimulation are user-defined, allowing for both modeling of existing\r\nprocessors, and experimentation with novel resource provisioning.  Thus,\r\nSKA can be employed either as an analysis tool for code optimization, or\r\nas a co-design tool to aid in the creation of new processor\r\nconfigurations.\r\n\r\nUsers can visualize the output of SKA pipeline\r\nsimulations with the _skaview_ program.  The novel view representations in skaview give\r\nthe user both detailed clock-for-clock execution information, as well as\r\nintuitive _slope_ and _graph_ views for high-level detection of serious data\r\nand structural hazards.\r\n\r\n## Pipeline Simulator\r\n\r\n![Pipeline Simulation Detail](http://tuxfan.git.com/ska/images/pipeline.png)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"SKA","tagline":"Static Kernel Analyzer (SKA)"}