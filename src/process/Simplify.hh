#ifndef Simplify_he
#define Simplify_hh

#include <string>
#include <cstring>
#include <vector>
#include <list>

#include <llvm/IR/Module.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/Instruction.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/ADT/APInt.h>
#include <llvm/Support/raw_ostream.h>
#include <llvm/Support/SourceMgr.h>
#include <llvm/IRReader/IRReader.h>
#include <llvm/IR/InstIterator.h>
#include <llvm/IR/CFG.h>

#include <FileIO.hh>
#include <Decode.hh>
#include <Instruction.hh>
#include <MachineState.hh>
#include <Statistics.hh>

#include <Dependency.hh>

#if defined(HAVE_GRAPHVIZ)
#include <Graphviz.hh>
#endif

#include <OpCodes.hh>
#include <OpTypes.hh>
#include <Core.hh>
#include <Utils.hh>
#include <algorithm>
#include <stack>

#include <TypeDefs.hh>


namespace ska{

class simplify_nodes{

          //simplify the interference table
          //generated by dataflow analysis

private :  


          std::stack<std::pair<llvm::Value *, bool>> simple_nodes;
                          //nodes < K degree are false 
                          //nodes > K degree are true
                          //true means potential spill
                          //false means no spill
          int K;

                 //maximum degree allowed for a node
                 //i.e. max number of colors


          typedef int reg_type; //register type
          typedef int color; //color
          typedef int numPhys; //number of physical registers

          std::map<color, reg_type> color_map;
                  //many-to-one mapping of 
                  //color to register type
                  //eg : floating point, integer
          std::map<reg_type, numPhys> reg_map; 
                 //maps each regType to the number
                 //of phys regs available
                 //eg : there can be 10 fp regs
                 //and 10 int regs
                 //so it says how many colors
                 //per register
                          
public :

          simplify_nodes(std::map<llvm::Value *, intf> intf_table, dependency_map_t dmap);

};


simplify_nodes::simplify_nodes( std::map<llvm::Value *, intf> intf_table,
                                                 dependency_map_t dmap ){
          //simplify the graph
          //by populating the stack 
          //with simple/spill nodes

          std::map<llvm::Value *,intf>::iterator it_0 = intf_table.begin();
          while(it_0 != intf_table.end()){
                    int degree = (it_0->second).size();
                    if(degree > reg_map[0]){ //change to correct reg type later
                            std::pair<llvm::Value *,bool> t_pair
                                =( std::make_pair(it_0->first,false));
                            simple_nodes.push(t_pair);
                    }else{
                            std::pair<llvm::Value *,bool> t_pair
                               =( std::make_pair(it_0->first,true));
                            simple_nodes.push(t_pair);
                    }
                    it_0++;
          }
}

} //namespace ska

#endif
