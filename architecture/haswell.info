// Mapping of LLVM IR to Haswell :-

latency::ret --> RET
br --> JMP
sw --> JMP
indirectbr --> JMP
invoke --> CALL
resume --> RET
unreachable --> no mapping, what is this ?

add --> ADD  , for integers
        FADD , for floating point and double
        PADD , for vector integer
        ADDSS, for vector floating point 

sub --> SUB, for integeres
        FSUB, for floating point and double
        PSUB, for vector integers
        SUBSS, for vector floats 

mul --> IMUL, for integers
        FMUL, for floating point and double     
        PMUL, for vector integer
        MULSS, for vector floats

udiv --> DIV r64
sdiv --> IDIV r64

fdiv -->   FDIV  for float and double 
           DIVSS for vector xmm

urem --> FPREM
srem --> FPREM
frem --> FPREM // this is not accurate as x64 does not have
               //rem instructions for urem, srem and vector
               //FPREM is x87

shl --> SHR SHL SAR
lshl --> SHR SHL SAR
ashr -- >SHR SHL SAR

and or xor --> AND OR XOR

alloca --> //does not seem to be any instruction

load, store --> MOV r,m MOV m,r

getelementptr --> MOV m,r

fence --> //does not seem to be any instruction 

atomiccmprxchg --> CMPXCHG

atomicrmw --> CMPXCHG

//atomically modify the memory

trunc --> //does not seem to have any x86 instruction 

zext --> //no x86 instruction

sext --> //no x86 instruction

fptoui --> //no x86 instruction

fptosi -->//no x86 instruction

uitofp -->//no x86 instruction

sitofp --> //no x86 instruction

fptrunc --> //no x86 instruction

fpext --> //no x86 instruction

ptrtoint --> //no x86 instruction

inttoptr --> //no x86 instruction

bitcast --> //no x86 instruction

icmp --> // CMP

fcmp --> // CMP ... using integer values

phi --> //no x86 instruction 

call --> //CALL 

select --> CALL -- not accurate because x86 call has branching 

userop1 --> //not in the llvm ir manual

userop2 --> //not in the llvm ir manual

vaarg --> //not in the llvm ir manual

extractelement --> MOVD xmm, r 

insertelement --> MOVD r, xmm

shufflevector --> //no instruction in haswell instruction set

extractvalue --> MOVD xmm, r

insertvalue --> MOVD r, xmm

landingpad --> //no x86 instruction

malloc --> //not an x86 instruction

free --> //not an x86 instruction

fabs -->  FABS

sqrt --> FSQRT and SQRTSS/PS

rsqrt  -->  FSQRT and SQRTSS/PS

hadd --> //which llvm instruction is this ?  -- PHADD, ADD

log --> FYL2X //does not contain any vector instruction in x86
             //this is x87 floating point instruction

pow --> FYL2X + F2XM1
