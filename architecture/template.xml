<?xml version = "1.0" encoding = "iso-8859-1"?>
<!--###########################################################################
 # Copyright (c) 2012 Los Alamos National Security, LLC
 # All rights reserved.
 ############################################################################-->

<!DOCTYPE root [
	<!ELEMENT root (value*)>
	<!ATTLIST root label CDATA #REQUIRED>
	<!ELEMENT value (boolean|real|string|integer|size|
		boolean_vector|real_vector|string_vector|integer_vector|size_vector)+>
		<!ATTLIST value	key CDATA #REQUIRED>
		<!ELEMENT boolean (#PCDATA)>
		<!ELEMENT real (#PCDATA)>
		<!ELEMENT string (#PCDATA)>
		<!ELEMENT integer (#PCDATA)>
		<!ELEMENT size (#PCDATA)>
		<!ELEMENT boolean_vector (#PCDATA)>
		<!ELEMENT real_vector (#PCDATA)>
		<!ELEMENT string_vector (#PCDATA)>
		<!ELEMENT integer_vector (#PCDATA)>
		<!ELEMENT size_vector (#PCDATA)>
]>

<root label="1.0">

<value key="name">
	<string>Template</string>
</value>

<!--###########################################################################
 ##############################################################################
 # Core features
 ##############################################################################
 ############################################################################-->

<value key="core::max_issue">
	<size>1</size>
</value>

<!--###########################################################################
 ##############################################################################
 # Logic Units
 ##############################################################################
 ############################################################################-->

<value key="lus">
	<size>7</size>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + LSU: load/store unit
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- LSU: instructions -->
<value key="lu::0::instructions">
	<string>alloca load store getelementptr</string>
</value>

<!-- LSU: types -->
<value key="lu::0::types">
	<string>any</string>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + ALU: integer arithmetic logic unit
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ALU: instructions -->
<value key="lu::1::instructions">
	<string>add sub mul udiv sdiv urem srem ashr</string>
</value>

<!-- ALU: types -->
<value key="lu::1::types">
	<string>integer</string>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + ILU: integer logic unit
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ILU: instructions -->
<value key="lu::2::instructions">
	<string>shl lshr and or xor trunc zext sext ptrtoint inttoptr bitcast icmp</string>
</value>

<!-- ILU: types -->
<value key="lu::2::types">
	<string>any</string>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + BRU: branch unit
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- BRU: instructions -->
<value key="lu::3::instructions">
	<string>ret br switch indirectbr invoke resume unreachable phi call select vaarg landingpad</string>
</value>

<!-- BRU: types -->
<value key="lu::3::types">
	<string>any</string>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + FPU: floating-point unit
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- FPU: instructions -->
<value key="lu::4::instructions">
	<string>fadd fsub fmul fdiv frem fptoui fptosi uitofp sitofp fptrunc fpext fcmp</string>
</value>

<!-- FPU: types -->
<value key="lu::4::types">
	<string>any</string>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + VU: vector unit
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- VU: instructions -->
<value key="lu::5::instructions">
	<string>extractelement insertelement shufflevector extractvalue insertvalue</string>
</value>

<!-- VU: types -->
<value key="lu::5::types">
	<string>any</string>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + NOP: no-op unit
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- NOP: instructions -->
<value key="lu::6::instructions">
	<string>fence atomiccmpxchg atomicrmw</string>
</value>

<value key="lu::6::types">
	<string>any</string>
</value>

<!--###########################################################################
 ##############################################################################
 # Instructions
 ##############################################################################
 ############################################################################-->

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Terminator Operations
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ==================================
 = ret
 =================================== -->

<value key="latency::ret">
	<size>1</size>
</value>

<value key="reciprocal::ret">
	<real>1</real>
</value>

<!-- ==================================
 = br
 =================================== -->

<value key="latency::br">
	<size>1</size>
</value>

<value key="reciprocal::br">
	<real>1</real>
</value>

<!-- ==================================
 = switch
 =================================== -->

<value key="latency::switch">
	<size>1</size>
</value>

<value key="reciprocal::switch">
	<real>1</real>
</value>

<!-- ==================================
 = indirectbr
 =================================== -->

<value key="latency::indirectbr">
	<size>1</size>
</value>

<value key="reciprocal::indirectbr">
	<real>1</real>
</value>

<!-- ==================================
 = invoke
 =================================== -->

<value key="latency::invoke">
	<size>1</size>
</value>

<value key="reciprocal::invoke">
	<real>1</real>
</value>

<!-- ==================================
 = resume
 =================================== -->

<value key="latency::resume">
	<size>1</size>
</value>

<value key="reciprocal::resume">
	<real>1</real>
</value>

<!-- ==================================
 = unreachable
 =================================== -->

<value key="latency::unreachable">
	<size>1</size>
</value>

<value key="reciprocal::unreachable">
	<real>1</real>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Standard Binary Operations
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ==================================
 = add
 =================================== -->

<!-- any -->
<value key="latency::add">
	<size>2</size>
</value>

<value key="reciprocal::add">
	<real>1</real>
</value>

<!-- ==================================
 = fadd
 =================================== -->

<!-- float -->
<value key="latency::fadd::float">
	<size>3</size>
</value>

<value key="reciprocal::fadd::float">
	<real>2</real>
</value>

<!-- double -->
<value key="latency::fadd::double">
	<size>3</size>
</value>

<value key="reciprocal::fadd::double">
	<real>2</real>
</value>

<!-- vector -->
<value key="latency::fadd::vector">
	<size>3</size>
</value>

<value key="reciprocal::fadd::vector">
	<real>2</real>
</value>

<!-- ==================================
 = sub
 =================================== -->

<value key="latency::sub">
	<size>2</size>
</value>

<value key="reciprocal::sub">
	<real>1</real>
</value>

<!-- ==================================
 = fsub
 =================================== -->

<!-- float -->
<value key="latency::fsub::float">
	<size>3</size>
</value>

<value key="reciprocal::fsub::float">
	<real>2</real>
</value>

<!-- double -->
<value key="latency::fsub::double">
	<size>3</size>
</value>

<value key="reciprocal::fsub::double">
	<real>2</real>
</value>

<!-- vector -->
<value key="latency::fsub::vector">
	<size>3</size>
</value>

<value key="reciprocal::fsub::vector">
	<real>2</real>
</value>

<!-- ==================================
 = mul
 =================================== -->

<value key="latency::mul">
	<size>5</size>
</value>

<value key="reciprocal::mul">
	<real>1</real>
</value>

<!-- ==================================
 = fmul
 =================================== -->

<!-- float -->
<value key="latency::fmul::float">
	<size>4</size>
</value>

<value key="reciprocal::fmul::float">
	<real>2</real>
</value>

<!-- double -->
<value key="latency::fmul::double">
	<size>5</size>
</value>

<value key="reciprocal::fmul::double">
	<real>2</real>
</value>

<!-- vector -->
<value key="latency::fmul::vector">
	<size>5</size>
</value>

<value key="reciprocal::fmul::vector">
	<real>2</real>
</value>

<!-- ==================================
 = udiv
 =================================== -->

<value key="latency::udiv">
	<size>39</size>
</value>

<value key="reciprocal::udiv">
	<real>39</real>
</value>

<!-- ==================================
 = sdiv
 =================================== -->

<value key="latency::sdiv">
	<size>39</size>
</value>

<value key="reciprocal::sdiv">
	<real>39</real>
</value>

<!-- ==================================
 = fdiv
 =================================== -->

<!-- float -->
<value key="latency::fdiv::float">
	<size>34</size>
</value>

<value key="reciprocal::fdiv::float">
	<real>34</real>
</value>

<!-- double -->
<value key="latency::fdiv::double">
	<size>62</size>
</value>

<value key="reciprocal::fdiv::double">
	<real>62</real>
</value>

<!-- vector -->
<value key="latency::fdiv::vector">
	<size>62</size>
</value>

<value key="reciprocal::fdiv::vector">
	<real>62</real>
</value>

<!-- ==================================
 = urem
 =================================== -->

<value key="latency::urem">
	<size>39</size>
</value>

<value key="reciprocal::urem">
	<real>1</real>
</value>

<!-- ==================================
 = srem
 =================================== -->

<value key="latency::srem">
	<size>39</size>
</value>

<value key="reciprocal::srem">
	<real>1</real>
</value>

<!-- ==================================
 = frem
 =================================== -->

<!-- float -->
<value key="latency::frem::float">
	<size>34</size>
</value>

<value key="reciprocal::frem::float">
	<real>34</real>
</value>

<!-- double -->
<value key="latency::frem::double">
	<size>62</size>
</value>

<value key="reciprocal::frem::double">
	<real>34</real>
</value>

<!-- vector -->
<value key="latency::frem::vector">
	<size>62</size>
</value>

<value key="reciprocal::frem::vector">
	<real>34</real>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Logical Operations
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ==================================
 = shl
 =================================== -->

<value key="latency::shl">
	<size>1</size>
</value>

<value key="reciprocal::shl">
	<real>1</real>
</value>

<!-- ==================================
 = lshl
 =================================== -->

<value key="latency::lshr">
	<size>1</size>
</value>

<value key="reciprocal::lshr">
	<real>1</real>
</value>

<!-- ==================================
 = ashr
 =================================== -->

<value key="latency::ashr">
	<size>1</size>
</value>

<value key="reciprocal::ashr">
	<real>1</real>
</value>

<!-- ==================================
 = and
 =================================== -->

<!-- standard unary -->
<value key="latency::and">
	<size>1</size>
</value>

<value key="reciprocal::and">
	<real>1</real>
</value>

<!-- ==================================
 = or
 =================================== -->

<value key="latency::or">
	<size>1</size>
</value>

<value key="reciprocal::or">
	<real>1</real>
</value>

<!-- ==================================
 = xor
 =================================== -->

<value key="latency::xor">
	<size>1</size>
</value>

<value key="reciprocal::xor">
	<real>1</real>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Memory Operations
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ==================================
 = alloca
 =================================== -->

<!-- alloca -->
<value key="latency::alloca">
	<size>1</size>
</value>

<value key="reciprocal::alloca">
	<real>1</real>
</value>

<!-- ==================================
 = load
 =================================== -->

<!-- load -->
<value key="latency::load">
	<size>1</size>
</value>

<value key="reciprocal::load">
	<real>1</real>
</value>

<!-- ==================================
 = store
 =================================== -->

<!-- store -->
<value key="latency::store">
	<size>1</size>
</value>

<value key="reciprocal::store">
	<real>1</real>
</value>

<!-- ==================================
 = getelementptr
 =================================== -->

<!-- getelementptr -->
<value key="latency::getelementptr">
	<size>1</size>
</value>

<value key="reciprocal::getelementptr">
	<real>1</real>
</value>

<!-- ==================================
 = fence
 =================================== -->

<!-- fence -->
<value key="latency::fence">
	<size>1</size>
</value>

<value key="reciprocal::fence">
	<real>1</real>
</value>

<!-- ==================================
 = atomiccmpxchg
 =================================== -->

<!-- atomiccmpxchg -->
<value key="latency::atomiccmpxchg">
	<size>1</size>
</value>

<value key="reciprocal::atomiccmpxchg">
	<real>1</real>
</value>

<!-- ==================================
 = atomicrmw
 =================================== -->

<!-- atomicrmw -->
<value key="latency::atomicrmw">
	<size>1</size>
</value>

<value key="reciprocal::atomicrmw">
	<real>1</real>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Cast Operations
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ==================================
 = trunc
 =================================== -->

<value key="latency::trunc">
	<size>1</size>
</value>

<value key="reciprocal::trunc">
	<real>1</real>
</value>

<!-- ==================================
 = zext
 =================================== -->

<value key="latency::zext">
	<size>1</size>
</value>

<value key="reciprocal::zext">
	<real>1</real>
</value>

<!-- ==================================
 = sext
 =================================== -->

<value key="latency::sext">
	<size>1</size>
</value>

<value key="reciprocal::sext">
	<real>1</real>
</value>

<!-- ==================================
 = fptoui
 =================================== -->

<value key="latency::fptoui">
	<size>1</size>
</value>

<value key="reciprocal::fptoui">
	<real>1</real>
</value>

<!-- ==================================
 = fptosi
 =================================== -->

<value key="latency::fptosi">
	<size>1</size>
</value>

<value key="reciprocal::fptosi">
	<real>1</real>
</value>

<!-- ==================================
 = uitofp
 =================================== -->

<value key="latency::uitofp">
	<size>1</size>
</value>

<value key="reciprocal::uitofp">
	<real>1</real>
</value>

<!-- ==================================
 = sitofp
 =================================== -->

<value key="latency::sitofp">
	<size>1</size>
</value>

<value key="reciprocal::sitofp">
	<real>1</real>
</value>

<!-- ==================================
 = fptrunc
 =================================== -->

<value key="latency::fptrunc">
	<size>1</size>
</value>

<value key="reciprocal::fptrunc">
	<real>1</real>
</value>

<!-- ==================================
 = fpext
 =================================== -->

<value key="latency::fpext">
	<size>1</size>
</value>

<value key="reciprocal::fpext">
	<real>1</real>
</value>

<!-- ==================================
 = ptrtoint
 =================================== -->

<value key="latency::ptrtoint">
	<size>1</size>
</value>

<value key="reciprocal::ptrtoint">
	<real>1</real>
</value>

<!-- ==================================
 = inttoptr
 =================================== -->

<value key="latency::inttoptr">
	<size>1</size>
</value>

<value key="reciprocal::inttoptr">
	<real>1</real>
</value>

<!-- ==================================
 = bitcast
 =================================== -->

<value key="latency::bitcast">
	<size>1</size>
</value>

<value key="reciprocal::bitcast">
	<real>1</real>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Other Operations
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ==================================
 = icmp
 =================================== -->

<value key="latency::icmp">
	<size>1</size>
</value>

<value key="reciprocal::icmp">
	<real>1</real>
</value>

<!-- ==================================
 = fcmp
 =================================== -->

<value key="latency::fcmp">
	<size>1</size>
</value>

<value key="reciprocal::fcmp">
	<real>1</real>
</value>

<!-- ==================================
 = phi
 =================================== -->

<!-- phi -->
<value key="latency::phi">
	<size>1</size>
</value>

<value key="reciprocal::phi">
	<real>1</real>
</value>

<!-- ==================================
 = call
 =================================== -->

<value key="latency::call">
	<size>1</size>
</value>

<value key="reciprocal::call">
	<real>1</real>
</value>

<!-- ==================================
 = select
 =================================== -->

<value key="latency::select">
	<size>1</size>
</value>

<value key="reciprocal::select">
	<real>1</real>
</value>

<!-- ==================================
 = useop1
 =================================== -->

<value key="latency::userop1">
	<size>1</size>
</value>

<value key="reciprocal::useop1">
	<real>1</real>
</value>

<!-- ==================================
 = userop2
 =================================== -->

<value key="latency::userop2">
	<size>1</size>
</value>

<value key="reciprocal::userop2">
	<real>1</real>
</value>

<!-- ==================================
 = vaarg
 =================================== -->

<value key="latency::vaarg">
	<size>1</size>
</value>

<value key="reciprocal::vaarg">
	<real>1</real>
</value>

<!-- ==================================
 = extractelement
 =================================== -->

<value key="latency::extractelement">
	<size>1</size>
</value>

<value key="reciprocal::extractelement">
	<real>1</real>
</value>

<!-- ==================================
 = insertelement
 =================================== -->

<value key="latency::insertelement">
	<size>1</size>
</value>

<value key="reciprocal::insertelement">
	<real>1</real>
</value>

<!-- ==================================
 = shufflevector
 =================================== -->

<value key="latency::shufflevector">
	<size>1</size>
</value>

<value key="reciprocal::shufflevector">
	<real>1</real>
</value>

<!-- ==================================
 = extractvalue
 =================================== -->

<value key="latency::extractvalue">
	<size>1</size>
</value>

<value key="reciprocal::extractvalue">
	<real>1</real>
</value>

<!-- ==================================
 = insertvalue
 =================================== -->

<value key="latency::insertvalue">
	<size>1</size>
</value>

<value key="reciprocal::insertvalue">
	<real>1</real>
</value>

<!-- ==================================
 = landingpad
 =================================== -->

<value key="latency::landingpad">
	<size>1</size>
</value>

<value key="reciprocal::landingpad">
	<real>1</real>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Call Operations
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ==================================
 = malloc
 =================================== -->

<!-- pointer -->
<value key="latency::malloc::pointer">
	<size>1</size>
</value>

<value key="reciprocal::malloc::pointer">
	<real>1</real>
</value>

<!-- ==================================
 = free
 =================================== -->

<!-- pointer -->
<value key="latency::free::pointer">
	<size>1</size>
</value>

<value key="reciprocal::free::pointer">
	<real>1</real>
</value>

<!-- ==================================
 = fabs
 =================================== -->

<!-- float -->
<value key="latency::fabsf::float">
	<size>1</size>
</value>

<value key="reciprocal::fabsf::float">
	<real>1</real>
</value>

<!-- double -->
<value key="latency::fabs::double">
	<size>1</size>
</value>

<value key="reciprocal::fabs::double">
	<real>1</real>
</value>

<!-- ==================================
 = sqrt
 =================================== -->

<!-- float -->
<value key="latency::sqrt::float">
	<size>56</size>
</value>

<value key="reciprocal::sqrt::float">
	<real>1</real>
</value>

<!-- float -->
<value key="latency::sqrtf::float">
	<size>56</size>
</value>

<value key="reciprocal::sqrtf::float">
	<real>1</real>
</value>

<!-- double -->
<value key="latency::sqrt::double">
	<size>114</size>
</value>

<value key="reciprocal::sqrt::double">
	<real>1</real>
</value>

<!-- vector -->
<value key="latency::sqrt::vector">
	<size>114</size>
</value>

<value key="reciprocal::sqrt::vector">
	<real>1</real>
</value>

<!-- ==================================
 = rsqrt
 =================================== -->

<!-- float -->
<value key="latency::rsqrt::float">
	<size>3</size>
</value>

<value key="reciprocal::rsqrt::float">
	<real>2</real>
</value>

<!-- double -->
<value key="latency::rsqrt::double">
	<size>3</size>
</value>

<value key="reciprocal::rsqrt::double">
	<real>2</real>
</value>

<!-- vector -->
<value key="latency::rsqrt::vector">
	<size>3</size>
</value>

<value key="reciprocal::rsqrt::vector">
	<real>2</real>
</value>

<!-- ==================================
 = hadd
 =================================== -->

<!-- float -->
<value key="latency::hadd::float">
	<size>4</size>
</value>

<value key="reciprocal::hadd::float">
	<real>2</real>
</value>

<!-- double -->
<value key="latency::hadd::double">
	<size>4</size>
</value>

<value key="reciprocal::hadd::double">
	<real>2</real>
</value>

<!-- vector -->
<value key="latency::hadd::vector">
	<size>4</size>
</value>

<value key="reciprocal::hadd::vector">
	<real>2</real>
</value>

<!-- ==================================
 = log
 =================================== -->

<!-- float -->
<value key="latency::log::float">
	<size>4</size>
</value>

<value key="reciprocal::log::float">
	<real>2</real>
</value>

<!-- double -->
<value key="latency::log::double">
	<size>4</size>
</value>

<value key="reciprocal::log::double">
	<real>2</real>
</value>

<!-- vector -->
<value key="latency::log::vector">
	<size>4</size>
</value>

<value key="reciprocal::log::vector">
	<real>2</real>
</value>

<!-- ==================================
 = pow
 =================================== -->

<!-- float -->
<value key="latency::pow::float">
	<size>4</size>
</value>

<value key="reciprocal::pow::float">
	<real>2</real>
</value>

<!-- double -->
<value key="latency::pow::double">
	<size>4</size>
</value>

<value key="reciprocal::pow::double">
	<real>2</real>
</value>

<!-- vector -->
<value key="latency::pow::vector">
	<size>4</size>
</value>

<value key="reciprocal::pow::vector">
	<real>2</real>
</value>

<!-- ==================================
 = rand
 =================================== -->

<!-- float -->
<value key="latency::rand::integer">
	<size>4</size>
</value>

<value key="reciprocal::rand::integer">
	<real>2</real>
</value>

<!-- ==================================
 = printf
 =================================== -->

<!-- integer -->
<value key="latency::printf::integer">
	<size>1</size>
</value>

<value key="reciprocal::printf::integer">
	<real>1</real>
</value>

</root>
