<!--###########################################################################
 # Copyright (c) 2012 Los Alamos National Security, LLC
 # All rights reserved.
 ############################################################################-->

<?xml version = "1.0" encoding = "iso-8859-1"?>
<!DOCTYPE root [
	<!ELEMENT root (value*)>
	<!ATTLIST root label CDATA #REQUIRED>
	<!ELEMENT value (boolean|real|string|integer|size|
		boolean_vector|real_vector|string_vector|integer_vector|size_vector)+>
		<!ATTLIST value	key CDATA #REQUIRED>
		<!ELEMENT boolean (#PCDATA)>
		<!ELEMENT real (#PCDATA)>
		<!ELEMENT string (#PCDATA)>
		<!ELEMENT integer (#PCDATA)>
		<!ELEMENT size (#PCDATA)>
		<!ELEMENT boolean_vector (#PCDATA)>
		<!ELEMENT real_vector (#PCDATA)>
		<!ELEMENT string_vector (#PCDATA)>
		<!ELEMENT integer_vector (#PCDATA)>
		<!ELEMENT size_vector (#PCDATA)>
]>

<root label="1.0">

<value key="name">
	<string>Template</string>
</value>

<!--###########################################################################
 ##############################################################################
 # Core features
 ##############################################################################
 ############################################################################-->

<value key="core::max_issue">
	<size>2</size>
</value>

<!--###########################################################################
 ##############################################################################
 # Logic Units
 ##############################################################################
 ############################################################################-->

<value key="lus">
	<size>2</size>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Pipeline 0
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- Pipeline 0: instructions -->
<value key="lu::0::instructions">
	<string>add fadd sub fsub mul fmul udiv sdiv fdiv urem srem frem fptosi fptoui and or xor icmp fcmp shl lshr fptrunc fpext uitofp sitofp ptrtoint inttoptr bitcast ashr trunc zext sext</string>
</value>

<!-- Pipeline 0: types -->
<value key="lu::0::types">
	<string>any</string>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Pipeline 1
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- Pipeline 1: instructions -->
<value key="lu::1::instructions">
	<string>br indirectbr ret switch invoke resume unreachable extractelement insertelement shufflevector extractvector insertvalue landingpad alloca load store getelementptr fence atomiccmpxchg atomicrmw phi call select userop1 userop2 vaarg</string>
</value>

<!-- Pipeline 1: types -->
<value key="lu::1::types">
	<string>any</string>
</value>

<!--###########################################################################
 ##############################################################################
 # Instructions
 ##############################################################################
 ############################################################################-->

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Terminator Operations
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ==================================
 = ret
 =================================== -->

<value key="latency::ret">
	<size>1</size>
</value>

<value key="reciprocal::ret">
	<real>1</real>
</value>

<!-- ==================================
 = br
 =================================== -->

<value key="latency::br">
	<size>1</size>
</value>

<value key="reciprocal::br">
	<real>1</real>
</value>

<!-- ==================================
 = switch
 =================================== -->

<value key="latency::switch">
	<size>1</size>
</value>

<value key="reciprocal::switch">
	<real>1</real>
</value>

<!-- ==================================
 = indirectbr
 =================================== -->

<value key="latency::indirectbr">
	<size>1</size>
</value>

<value key="reciprocal::indirectbr">
	<real>1</real>
</value>

<!-- ==================================
 = invoke
 =================================== -->

<value key="latency::invoke">
	<size>1</size>
</value>

<value key="reciprocal::invoke">
	<real>1</real>
</value>

<!-- ==================================
 = resume
 =================================== -->

<value key="latency::resume">
	<size>1</size>
</value>

<value key="reciprocal::resume">
	<real>1</real>
</value>

<!-- ==================================
 = unreachable
 =================================== -->

<value key="latency::unreachable">
	<size>1</size>
</value>

<value key="reciprocal::unreachable">
	<real>1</real>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Standard Binary Operations
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ==================================
 = add
 =================================== -->

<!-- any -->
<value key="latency::add">
	<size>2</size>
</value>

<value key="reciprocal::add">
	<real>1</real>
</value>

<!-- ==================================
 = fadd
 =================================== -->

<!-- float -->
<value key="latency::fadd::float">
	<size>3</size>
</value>

<value key="reciprocal::fadd::float">
	<real>2</real>
</value>

<!-- double -->
<value key="latency::fadd::double">
	<size>3</size>
</value>

<value key="reciprocal::fadd::double">
	<real>2</real>
</value>

<!-- vector -->
<value key="latency::fadd::vector">
	<size>3</size>
</value>

<value key="reciprocal::fadd::vector">
	<real>2</real>
</value>

<!-- ==================================
 = sub
 =================================== -->

<value key="latency::sub">
	<size>2</size>
</value>

<value key="reciprocal::sub">
	<real>1</real>
</value>

<!-- ==================================
 = fsub
 =================================== -->

<!-- float -->
<value key="latency::fsub::float">
	<size>3</size>
</value>

<value key="reciprocal::fsub::float">
	<real>2</real>
</value>

<!-- double -->
<value key="latency::fsub::double">
	<size>3</size>
</value>

<value key="reciprocal::fsub::double">
	<real>2</real>
</value>

<!-- vector -->
<value key="latency::fsub::vector">
	<size>3</size>
</value>

<value key="reciprocal::fsub::vector">
	<real>2</real>
</value>

<!-- ==================================
 = mul
 =================================== -->

<value key="latency::mul">
	<size>5</size>
</value>

<value key="reciprocal::mul">
	<real>1</real>
</value>

<!-- ==================================
 = fmul
 =================================== -->

<!-- float -->
<value key="latency::fmul::float">
	<size>4</size>
</value>

<value key="reciprocal::fmul::float">
	<real>2</real>
</value>

<!-- double -->
<value key="latency::fmul::double">
	<size>4</size>
</value>

<value key="reciprocal::fmul::double">
	<real>2</real>
</value>

<!-- vector -->
<value key="latency::fmul::vector">
	<size>4</size>
</value>

<value key="reciprocal::fmul::vector">
	<real>2</real>
</value>

<!-- ==================================
 = udiv
 =================================== -->

<value key="latency::udiv">
	<size>39</size>
</value>

<value key="reciprocal::udiv">
	<size>39</size>
</value>

<!-- ==================================
 = sdiv
 =================================== -->

<value key="latency::sdiv">
	<size>39</size>
</value>

<value key="reciprocal::sdiv">
	<real>39</real>
</value>

<!-- ==================================
 = fdiv
 =================================== -->

<!-- float -->
<value key="latency::fdiv::float">
	<size>34</size>
</value>

<value key="reciprocal::fdiv::float">
	<real>34</real>
</value>

<!-- double -->
<value key="latency::fdiv::double">
	<size>62</size>
</value>

<value key="reciprocal::fdiv::double">
	<real>62</real>
</value>

<!-- vector -->
<value key="latency::fdiv::vector">
	<size>62</size>
</value>

<value key="reciprocal::fdiv::vector">
	<real>62</real>
</value>

<!-- ==================================
 = urem
 =================================== -->

<value key="latency::urem">
	<size>39</size>
</value>

<value key="reciprocal::urem">
	<real>1</real>
</value>

<!-- ==================================
 = srem
 =================================== -->

<value key="latency::srem">
	<size>39</size>
</value>

<value key="reciprocal::srem">
	<real>1</real>
</value>

<!-- ==================================
 = frem
 =================================== -->

<!-- float -->
<value key="latency::frem::float">
	<size>34</size>
</value>

<value key="reciprocal::frem::float">
	<real>34</real>
</value>

<!-- double -->
<value key="latency::frem::double">
	<size>62</size>
</value>

<value key="reciprocal::frem::double">
	<real>34</real>
</value>

<!-- vector -->
<value key="latency::frem::vector">
	<size>62</size>
</value>

<value key="reciprocal::frem::vector">
	<real>34</real>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Logical Operations
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ==================================
 = shl
 =================================== -->

<value key="latency::shl">
	<size>4</size>
</value>

<value key="reciprocal::shl">
	<real>1</real>
</value>

<!-- ==================================
 = lshl
 =================================== -->

<value key="latency::lshr">
	<size>4</size>
</value>

<value key="reciprocal::lshr">
	<real>1</real>
</value>

<!-- ==================================
 = ashr
 =================================== -->

<value key="latency::ashr">
	<size>4</size>
</value>

<value key="reciprocal::ashr">
	<real>1</real>
</value>

<!-- ==================================
 = and
 =================================== -->

<!-- standard unary -->
<value key="latency::and">
	<size>2</size>
</value>

<value key="reciprocal::and">
	<real>1</real>
</value>

<!-- ==================================
 = or
 =================================== -->

<value key="latency::or">
	<size>2</size>
</value>

<value key="reciprocal::or">
	<real>1</real>
</value>

<!-- ==================================
 = xor
 =================================== -->

<value key="latency::xor">
	<size>2</size>
</value>

<value key="reciprocal::xor">
	<real>1</real>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Memory Operations
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ==================================
 = alloca
 =================================== -->

<!-- alloca -->
<value key="latency::alloca">
	<size>1</size>
</value>

<value key="reciprocal::alloca">
	<real>1</real>
</value>

<!-- ==================================
 = load
 =================================== -->

<!-- load -->
<value key="latency::load">
	<size>6</size>
</value>

<value key="reciprocal::load">
	<real>1</real>
</value>

<!-- ==================================
 = store
 =================================== -->

<!-- store -->
<value key="latency::store">
	<size>6</size>
</value>

<value key="reciprocal::store">
	<real>1</real>
</value>

<!-- ==================================
 = getelementptr
 =================================== -->

<!-- getelementptr -->
<value key="latency::getelementptr">
	<size>2</size>
</value>

<value key="reciprocal::getelementptr">
	<real>1</real>
</value>

<!-- ==================================
 = fence
 =================================== -->

<!-- fence -->
<value key="latency::fence">
	<size>7</size>
</value>

<value key="reciprocal::fence">
	<real>7</real>
</value>

<!-- ==================================
 = atomiccmpxchg
 =================================== -->

<!-- atomiccmpxchg -->
<value key="latency::atomiccmpxchg">
	<size>1</size>
</value>

<value key="reciprocal::atomiccmpxchg">
	<real>1</real>
</value>

<!-- ==================================
 = atomicrmw
 =================================== -->

<!-- atomicrmw -->
<value key="latency::atomicrmw">
	<size>1</size>
</value>

<value key="reciprocal::atomicrmw">
	<real>1</real>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Cast Operations
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ==================================
 = trunc
 =================================== -->

<value key="latency::trunc">
	<size>1</size>
</value>

<value key="reciprocal::trunc">
	<real>1</real>
</value>

<!-- ==================================
 = zext
 =================================== -->

<value key="latency::zext">
	<size>1</size>
</value>

<value key="reciprocal::zext">
	<real>1</real>
</value>

<!-- ==================================
 = sext
 =================================== -->

<value key="latency::sext">
	<size>1</size>
</value>

<value key="reciprocal::sext">
	<real>1</real>
</value>

<!-- ==================================
 = fptoui
 =================================== -->

<value key="latency::fptoui">
	<size>1</size>
</value>

<value key="reciprocal::fptoui">
	<real>1</real>
</value>

<!-- ==================================
 = fptosi
 =================================== -->

<value key="latency::fptosi">
	<size>1</size>
</value>

<value key="reciprocal::fptosi">
	<real>1</real>
</value>

<!-- ==================================
 = uitofp
 =================================== -->

<value key="latency::uitofp">
	<size>1</size>
</value>

<value key="reciprocal::uitofp">
	<real>1</real>
</value>

<!-- ==================================
 = sitofp
 =================================== -->

<value key="latency::sitofp">
	<size>1</size>
</value>

<value key="reciprocal::sitofp">
	<real>1</real>
</value>

<!-- ==================================
 = fptrunc
 =================================== -->

<value key="latency::fptrunc">
	<size>13</size>
</value>

<value key="reciprocal::fptrunc">
	<real>6</real>
</value>

<!-- ==================================
 = fpext
 =================================== -->

<value key="latency::fpext">
	<size>13</size>
</value>

<value key="reciprocal::fpext">
	<real>6</real>
</value>

<!-- ==================================
 = ptrtoint
 =================================== -->

<value key="latency::ptrtoint">
	<size>1</size>
</value>

<value key="reciprocal::ptrtoint">
	<real>1</real>
</value>

<!-- ==================================
 = inttoptr
 =================================== -->

<value key="latency::inttoptr">
	<size>1</size>
</value>

<value key="reciprocal::inttoptr">
	<real>1</real>
</value>

<!-- ==================================
 = bitcast
 =================================== -->

<value key="latency::bitcast">
	<size>1</size>
</value>

<value key="reciprocal::bitcast">
	<real>1</real>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Other Operations
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ==================================
 = icmp
 =================================== -->

<value key="latency::icmp">
	<size>2</size>
</value>

<value key="reciprocal::icmp">
	<real>1</real>
</value>

<!-- ==================================
 = fcmp
 =================================== -->

<value key="latency::fcmp">
	<size>2</size>
</value>

<value key="reciprocal::fcmp">
	<real>1</real>
</value>

<!-- ==================================
 = phi
 =================================== -->

<!-- phi -->
<value key="latency::phi">
	<size>1</size>
</value>

<value key="reciprocal::phi">
	<real>1</real>
</value>

<!-- ==================================
 = call
 =================================== -->

<value key="latency::call">
	<size>1</size>
</value>

<value key="reciprocal::call">
	<real>1</real>
</value>

<!-- ==================================
 = select
 =================================== -->

<value key="latency::select">
	<size>1</size>
</value>

<value key="reciprocal::select">
	<real>1</real>
</value>

<!-- ==================================
 = useop1
 =================================== -->

<value key="latency::userop1">
	<size>1</size>
</value>

<value key="reciprocal::useop1">
	<real>1</real>
</value>

<!-- ==================================
 = userop2
 =================================== -->

<value key="latency::userop2">
	<size>1</size>
</value>

<value key="reciprocal::userop2">
	<real>1</real>
</value>

<!-- ==================================
 = vaarg
 =================================== -->

<value key="latency::vaarg">
	<size>1</size>
</value>

<value key="reciprocal::vaarg">
	<real>1</real>
</value>

<!-- ==================================
 = extractelement
 =================================== -->

<value key="latency::extractelement">
	<size>4</size>
</value>

<value key="reciprocal::extractelement">
	<real>1</real>
</value>

<!-- ==================================
 = insertelement
 =================================== -->

<value key="latency::insertelement">
	<size>4</size>
</value>

<value key="reciprocal::insertelement">
	<real>1</real>
</value>

<!-- ==================================
 = shufflevector
 =================================== -->

<value key="latency::shufflevector">
	<size>4</size>
</value>

<value key="reciprocal::shufflevector">
	<real>1</real>
</value>

<!-- ==================================
 = extractvalue
 =================================== -->

<value key="latency::extractvalue">
	<size>4</size>
</value>

<value key="reciprocal::extractvalue">
	<real>1</real>
</value>

<!-- ==================================
 = insertvalue
 =================================== -->

<value key="latency::insertvalue">
	<size>4</size>
</value>

<value key="reciprocal::insertvalue">
	<real>1</real>
</value>

<!-- ==================================
 = landingpad
 =================================== -->

<value key="latency::landingpad">
	<size>1</size>
</value>

<value key="reciprocal::landingpad">
	<real>1</real>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Call Operations
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ==================================
 = sqrt
 =================================== -->

<!-- float -->
<value key="latency::sqrt::float">
	<size>4</size>
</value>

<value key="reciprocal::sqrt::float">
	<real>1</real>
</value>

<!-- double -->
<value key="latency::sqrt::double">
	<size>4</size>
</value>

<value key="reciprocal::sqrt::double">
	<real>1</real>
</value>

<!-- vector -->
<value key="latency::sqrt::vector">
	<size>4</size>
</value>

<value key="reciprocal::sqrt::vector">
	<real>1</real>
</value>

<!-- ==================================
 = rsqrt
 =================================== -->

<!-- float -->
<value key="latency::rsqrt::float">
	<size>4</size>
</value>

<value key="reciprocal::rsqrt::float">
	<real>1</real>
</value>

<!-- double -->
<value key="latency::rsqrt::double">
	<size>4</size>
</value>

<value key="reciprocal::rsqrt::double">
	<real>1</real>
</value>

<!-- vector -->
<value key="latency::rsqrt::vector">
	<size>4</size>
</value>

<value key="reciprocal::rsqrt::vector">
	<real>1</real>
</value>

<!-- ==================================
 = hadd
 =================================== -->

<!-- float -->
<value key="latency::hadd::float">
	<size>4</size>
</value>

<value key="reciprocal::hadd::float">
	<real>1</real>
</value>

<!-- double -->
<value key="latency::hadd::double">
	<size>4</size>
</value>

<value key="reciprocal::hadd::double">
	<real>1</real>
</value>

<!-- vector -->
<value key="latency::hadd::vector">
	<size>4</size>
</value>

<value key="reciprocal::hadd::vector">
	<real>1</real>
</value>

</root>
