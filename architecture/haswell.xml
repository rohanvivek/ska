<?xml version = "1.0" encoding = "iso-8859-1"?>
<!--###########################################################################
 # Copyright (c) 2012 Los Alamos National Security, LLC
 # All rights reserved.
 ############################################################################-->

<!DOCTYPE root [
	<!ELEMENT root (value*)>
	<!ATTLIST root label CDATA #REQUIRED>
	<!ELEMENT value (boolean|real|string|integer|size|
		boolean_vector|real_vector|string_vector|integer_vector|size_vector)+>
		<!ATTLIST value	key CDATA #REQUIRED>
		<!ELEMENT boolean (#PCDATA)>
		<!ELEMENT real (#PCDATA)>
		<!ELEMENT string (#PCDATA)>
		<!ELEMENT integer (#PCDATA)>
		<!ELEMENT size (#PCDATA)>
		<!ELEMENT boolean_vector (#PCDATA)>
		<!ELEMENT real_vector (#PCDATA)>
		<!ELEMENT string_vector (#PCDATA)>
		<!ELEMENT integer_vector (#PCDATA)>
		<!ELEMENT size_vector (#PCDATA)>
]>

<root label="1.0">

<value key="name">
	<string>Haswell</string>
</value>

<!--###########################################################################
 ##############################################################################
 # Core features
 ##############################################################################
 ############################################################################-->

<value key="core::max_issue">
	<size>4</size>
</value>

<!--###########################################################################
 ##############################################################################
 # Logic Units
 ##############################################################################
 ############################################################################-->

<value key="register_sets">
	<size>3</size>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Integer set
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<value key="rs::0::type">
	<string>Integer</string> <!-- 64 bit general puropose reg -->
</value>

<value key="rs::0::registers">
	<size>23</size>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Floating point set
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<value key="rs::1::type">
	<string>Float</string> <!-- includes x87 and MMX -->
</value>

<value key="rs::1::registers">
	<size>8</size>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Vector point set
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<value key="rs::2::type">
	<string>Vector</string> <!-- SSE, AVX -->
</value>

<value key="rs::2::registers">
	<size>16</size>
</value>


<!--###########################################################################
 ##############################################################################
 # Logic Units
 ##############################################################################
 ############################################################################-->

<value key="lus">
	<size>15</size>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Port 0
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- LSU: instructions -->
<value key="lu::0::instructions">
	<string> add sub mul udiv sdiv urem srem ashr shl lshr and or xor trunc zext sext ptrtoint inttoptr bitcast icmp ret br switch indirectbr invoke resume unreachable phi call select vaarg landingpad fadd fsub fmul fdiv frem fptoui fptosi uitofp sitofp fptrunc fpext fcmp  extractelement insertelement shufflevector extractvalue insertvalue  fence atomiccmpxchg atomicrmw  fadd fsub fmul fdiv frem fptoui fptosi uitofp sitofp fptrunc fpext fcmp </string>
</value>

<!-- LSU: types -->
<value key="lu::0::types">
	<string>any</string>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 +  Port 1 
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ALU: instructions -->
<value key="lu::1::instructions">
	<string>add sub mul urem srem ashr shl lshr and or xor trunc zext sext ptrtoint inttoptr bitcast icmp ret fadd fsub fmul fdiv frem fptoui fptosi uitofp sitofp fptrunc fpext fcmp  extractelement insertelement extractvalue insertvalue  fence atomiccmpxchg atomicrmw fadd fsub fmul fdiv frem fptoui fptosi uitofp sitofp fptrunc fpext fcmp </string>
</value>

<!-- ALU: types -->
<value key="lu::1::types">
	<string>integer float</string>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Port 2 
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ILU: instructions -->

<value key="lu::2::instructions">
	<string> alloca load store getelementptr</string>
</value>

<!-- ILU: types -->

<value key="lu::2::types">
	<string>any</string>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Port 3 
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- BRU: instructions -->
<value key="lu::3::instructions">
	<string>alloca load store getelementptr </string>
</value>

<!-- BRU: types -->
<value key="lu::3::types">
	<string>any</string>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Port 4 
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- FPU: instructions -->
<value key="lu::4::instructions">
	<string> store </string>
</value>

<!-- FPU: types -->
<value key="lu::4::types">
	<string>any</string>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Port 5 
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- VU: instructions -->
<value key="lu::5::instructions">
	<string>add sub mul urem srem ashr shl lshr and or xor trunc zext sext ptrtoint inttoptr bitcast icmp ret fadd fsub fmul fdiv frem fptoui fptosi uitofp sitofp fptrunc fpext fcmp  extractelement insertelement extractvalue insertvalue  fence atomiccmpxchg atomicrmw </string>
</value>

<!-- VU: types -->
<value key="lu::5::types">
	<string>integer vector</string>
</value>


<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Port 6 
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ALU: instructions -->
<value key="lu::6::instructions">
	<string>add sub mul udiv sdiv urem srem ashr shl lshr and or xor trunc zext sext ptrtoint inttoptr bitcast icmp ret br switch indirectbr invoke resume unreachable phi call select vaarg landingpad</string>
</value>

<!-- ALU: types -->
<value key="lu::6::types">
	<string>integer</string>
</value>


<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Port 7 
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ALU: instructions -->
<value key="lu::7::instructions">
	<string>store</string>
</value>

<!-- ALU: types -->
<value key="lu::7::types">
	<string>any</string>
</value>



<!-- LSU: instructions -->
<value key="lu::8::instructions">
	<string> add sub mul udiv sdiv urem srem ashr shl lshr and or xor trunc zext sext ptrtoint inttoptr bitcast icmp ret br switch indirectbr invoke resume unreachable phi call select vaarg landingpad fadd fsub fmul fdiv frem fptoui fptosi uitofp sitofp fptrunc fpext fcmp  extractelement insertelement shufflevector extractvalue insertvalue  fence atomiccmpxchg atomicrmw  fadd fsub fmul fdiv frem fptoui fptosi uitofp sitofp fptrunc fpext fcmp </string>
</value>

<!-- LSU: types -->
<value key="lu::8::types">
	<string>any</string>
</value>

<!-- LSU: instructions -->
<value key="lu::9::instructions">
	<string> add sub mul udiv sdiv urem srem ashr shl lshr and or xor trunc zext sext ptrtoint inttoptr bitcast icmp ret br switch indirectbr invoke resume unreachable phi call select vaarg landingpad fadd fsub fmul fdiv frem fptoui fptosi uitofp sitofp fptrunc fpext fcmp  extractelement insertelement shufflevector extractvalue insertvalue  fence atomiccmpxchg atomicrmw  fadd fsub fmul fdiv frem fptoui fptosi uitofp sitofp fptrunc fpext fcmp </string>
</value>

<!-- LSU: types -->
<value key="lu::9::types">
	<string>any</string>
</value>

<!-- LSU: instructions -->
<value key="lu::10::instructions">
	<string> add sub mul udiv sdiv urem srem ashr shl lshr and or xor trunc zext sext ptrtoint inttoptr bitcast icmp ret br switch indirectbr invoke resume unreachable phi call select vaarg landingpad fadd fsub fmul fdiv frem fptoui fptosi uitofp sitofp fptrunc fpext fcmp  extractelement insertelement shufflevector extractvalue insertvalue  fence atomiccmpxchg atomicrmw  fadd fsub fmul fdiv frem fptoui fptosi uitofp sitofp fptrunc fpext fcmp </string>
</value>

<!-- LSU: types -->
<value key="lu::10::types">
	<string>any</string>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Port 11 
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ILU: instructions -->

<value key="lu::11::instructions">
	<string> alloca load store getelementptr</string>
</value>

<!-- ILU: types -->

<value key="lu::11::types">
	<string>any</string>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Port 12 
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ILU: instructions -->

<value key="lu::12::instructions">
	<string> alloca load store getelementptr</string>
</value>

<!-- ILU: types -->

<value key="lu::12::types">
	<string>any</string>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Port 13 
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ILU: instructions -->

<value key="lu::13::instructions">
	<string> alloca load store getelementptr</string>
</value>

<!-- ILU: types -->

<value key="lu::13::types">
	<string>any</string>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Port 14 
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ILU: instructions -->

<value key="lu::14::instructions">
	<string> alloca load store getelementptr</string>
</value>

<!-- ILU: types -->

<value key="lu::14::types">
	<string>any</string>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Port 15 
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ILU: instructions -->

<value key="lu::15::instructions">
	<string> alloca load store getelementptr</string>
</value>

<!-- ILU: types -->

<value key="lu::15::types">
	<string>any</string>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Port 16
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ILU: instructions -->

<value key="lu::16::instructions">
	<string> alloca load store getelementptr</string>
</value>

<!-- ILU: types -->

<value key="lu::16::types">
	<string>any</string>
</value>


<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Port 17
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ILU: instructions -->

<value key="lu::17::instructions">
	<string> alloca load store getelementptr</string>
</value>

<!-- ILU: types -->

<value key="lu::17::types">
	<string>any</string>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Port 18
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ILU: instructions -->

<value key="lu::18::instructions">
	<string> alloca load store getelementptr</string>
</value>

<!-- ILU: types -->

<value key="lu::18::types">
	<string>any</string>
</value>



<!--###########################################################################
 ##############################################################################
 # Instructions
 ##############################################################################
 ############################################################################-->

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Terminator Operations
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ==================================
 = ret
 =================================== -->

<value key="latency::ret">
	<size>1</size>
</value>

<value key="reciprocal::ret">
	<real>1</real>
</value>

<!-- ==================================
 = ret integer
 =================================== -->

<value key="latency::ret::int"> 
	<size>2</size>
</value>

<value key="reciprocal::ret::int">
	<real>1</real>
</value>


<!-- ==================================
 = br
 =================================== -->

<value key="latency::br">
	<size>2</size>
</value>

<value key="reciprocal::br">
	<real>1</real>
</value>


<!-- ==================================
 = br
 =================================== -->

<value key="latency::br::memory">
	<size>2</size>
</value>

<value key="reciprocal::br::memory">
	<real>1</real>
</value>

<!-- ==================================
 = br
 =================================== -->

<value key="latency::br::memory">
	<size>2</size>
</value>

<value key="reciprocal::br::memory">
	<real>1</real>
</value>

<!-- ==================================
 = br
 =================================== -->

<value key="latency::br::register">
	<size>1</size>
</value>

<value key="reciprocal::br::memory">
	<real>1</real>
</value>

<!-- ==================================
 = br
 =================================== -->

<value key="latency::br::short_near">
	<size>1.5</size>
</value>

<value key="reciprocal::br::short_near">
	<real>1</real>
</value>


<!-- ==================================
 = switch
 =================================== -->

<value key="latency::switch">
	<size>1.5</size>
</value>

<value key="reciprocal::switch">
	<real>1</real>
</value>

<!-- ==================================
 = indirectbr
 =================================== -->

<value key="latency::indirectbr">
	<size>2</size>
</value>

<value key="reciprocal::indirectbr">
	<real>1</real>
</value>

<!-- ==================================
 = invoke
 =================================== -->

<value key="latency::invoke">
	<size>3</size>
</value>

<value key="reciprocal::invoke">
	<real>1</real>
</value>

<!-- ==================================
 = resume
 =================================== -->

<value key="latency::resume">
	<size>2</size>
</value>

<value key="reciprocal::resume">
	<real>1</real>
</value>

<!-- ==================================
 = unreachable
 =================================== -->

<value key="latency::unreachable"> <!-- does this really need latency ? -->
	<size>1</size>
</value>

<value key="reciprocal::unreachable">
	<real>1</real>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Standard Binary Operations
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ==================================
 = add
 =================================== -->

<!-- integer -->
<value key="latency::add::integer">
<size>1</size>
</value>

<value key="reciprocal::add::integer">
<real>0.25</real>
</value>

<!-- vector -->
<value key="latency::add::vector::integer">
<size>1</size>
</value>

<value key="reciprocal::add::vector::integer">
<real>0.5</real>
</value>

<!-- ==================================
 = fadd
 =================================== -->

<!-- float -->
<value key="latency::fadd::float">
	<size>3</size>
</value>

<value key="reciprocal::fadd::float">
	<real>1</real>
</value>

<!-- double -->
<value key="latency::fadd::double">
	<size>3</size>
</value>

<value key="reciprocal::fadd::double">
	<real>1</real>
</value>


<!-- vector floating point -->
<value key="latency::fadd::vector::float">
	<size>3</size>
</value>

<value key="reciprocal::fadd::vector::float">
	<real>1</real>
</value>



<!-- ==================================
 = sub
 =================================== -->

 <!-- int -->
 <value key="latency::sub::integer">
 <size>1</size>
 </value>

 <value key="reciprocal::sub::integer">
 <real>0.25</real>
 </value>

 <!-- vector -->
 <value key="latency::sub::vector::integer">
 <size>1</size>
 </value>

 <value key="reciprocal::sub::vector::integer">
 <real>0.5</real>
 </value>

<!-- ==================================
 = fsub
 =================================== -->

<!-- float -->
<value key="latency::fsub::float">
	<size>3</size>
</value>

<value key="reciprocal::fsub::float">
	<real>1</real>
</value>

<!-- double -->
<value key="latency::fsub::double">
	<size>3</size>
</value>

<value key="reciprocal::fsub::double">
	<real>1</real>
</value>


<!-- vector -->
<value key="latency::fsub::vector::float">
	<size>3</size>
</value>

<value key="reciprocal::fsub::vector::float">
	<real>1</real>
</value>


<!-- ==================================
 = mul
 =================================== -->

 <!-- integer -->
 <value key="latency::mul::int">
 <size>3</size>
 </value>

 <value key="reciprocal::mul::int">
 <real>1</real>
 </value>

 <!-- vector -->
 <value key="latency::mul::vector::int">
 <size>5</size>
 </value>

 <value key="reciprocal::mul::vector::int">
 <real>1</real>
 </value>

<!-- ==================================
 = fmul
 =================================== -->

<!-- float -->
<value key="latency::fmul::float">
	<size>5</size>
</value>

<value key="reciprocal::fmul::float">
	<real>1</real>
</value>

<!-- double -->
<value key="latency::fmul::double">
	<size>5</size>
</value>

<value key="reciprocal::fmul::double">
	<real>1</real>
</value>


<!-- vector -->
<value key="latency::fmul::vector::float">
	<size>5</size>
</value>

<value key="reciprocal::fmul::vector::float">
	<real>0.5</real>
</value>


<!-- ==================================
 = udiv
 =================================== -->

<value key="latency::udiv">
	<size>64</size>
</value>

<value key="reciprocal::udiv">
	<real>48</real>
</value>

<!-- ==================================
 = sdiv
 =================================== -->

<value key="latency::sdiv">
	<size>71</size>
</value>

<value key="reciprocal::sdiv">
	<real>50</real>
</value>

<!-- ==================================
 = fdiv
 =================================== -->

<!-- float -->
<value key="latency::fdiv::float">
	<size>17</size>
</value>

<value key="reciprocal::fdiv::float">
	<real>13</real>
</value>

<!-- double -->
<value key="latency::fdiv::double">
	<size>17</size>
</value>

<value key="reciprocal::fdiv::double">
	<real>13</real>
</value>

<!-- vector xmm-->
<value key="latency::fdiv::vector::xmm">
	<size>11.5</size>
</value>

<value key="reciprocal::fdiv::vector::xmm">
	<real>7</real>
</value>


<!-- ==================================
 = urem
 =================================== -->

<value key="latency::urem">
	<size>19</size>
</value>

<value key="reciprocal::urem">
	<real>13</real>
</value>

<!-- ==================================
 = srem
 =================================== -->

<value key="latency::srem">
	<size>19</size>
</value>

<value key="reciprocal::srem">
	<real>13</real>
</value>

<!-- ==================================
 = frem
 =================================== -->

<!-- float -->
<value key="latency::frem::float">
	<size>19</size>
</value>

<value key="reciprocal::frem::float">
	<real>13</real>
</value>

<!-- double -->
<value key="latency::frem::double">
	<size>19</size>
</value>

<value key="reciprocal::frem::double">
	<real>13</real>
</value>

<!-- vector -->
<value key="latency::frem::vector">
	<size>19</size>
</value>

<value key="reciprocal::frem::vector">
	<real>13</real>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Logical Operations
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ==================================
 = shl
 =================================== -->

<value key="latency::shl">
	<size>1</size>
</value>

<value key="reciprocal::shl">
	<real>0.5</real>
</value>

<!-- ==================================
 = lshl
 =================================== -->

<value key="latency::lshr">
	<size>1</size>
</value>

<value key="reciprocal::lshr">
	<real>0.5</real>
</value>

<!-- ==================================
 = ashr
 =================================== -->

<value key="latency::ashr">
	<size>1</size>
</value>

<value key="reciprocal::ashr">
	<real>0.5</real>
</value>

<!-- ==================================
 = and
 =================================== -->

<!-- standard unary -->
<value key="latency::and">
	<size>1</size>
</value>

<value key="reciprocal::and">
	<real>0.25</real>
</value>

<!-- ==================================
 = or
 =================================== -->

<value key="latency::or">
	<size>1</size>
</value>

<value key="reciprocal::or">
	<real>0.25</real>
</value>

<!-- ==================================
 = xor
 =================================== -->

<value key="latency::xor">
	<size>1</size>
</value>

<value key="reciprocal::xor">
	<real>0.25</real>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Memory Operations
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ==================================
 = alloca
 =================================== -->

<!-- alloca -->
<value key="latency::alloca">
	<size>1</size>
</value>

<value key="reciprocal::alloca">
	<real>1</real>
</value>

<!-- ==================================
 = load
 =================================== -->

<!-- load -->
<value key="latency::load"> 
	<size>3</size>
</value>

<value key="reciprocal::load">
	<real>1</real>
</value>

<!-- ==================================
 = store
 =================================== -->

<!-- store -->
<value key="latency::store">
	<size>3</size>
</value>

<value key="reciprocal::store">
	<real>1</real>
</value>

<!-- ==================================
 = getelementptr
 =================================== -->

<!-- getelementptr -->
<value key="latency::getelementptr">
	<size>3</size>
</value>

<value key="reciprocal::getelementptr">
	<real>1</real>
</value>

<!-- ==================================
 = fence
 =================================== -->

<!-- fence -->
<value key="latency::fence">
	<size>1</size>
</value>

<value key="reciprocal::fence">
	<real>1</real>
</value>

<!-- ==================================
 = atomiccmpxchg
 =================================== -->

<!-- atomiccmpxchg -->
<value key="latency::atomiccmpxchg">
	<size>1</size>
</value>

<value key="reciprocal::atomiccmpxchg">
	<real>8</real>
</value>

<!-- ==================================
 = atomicrmw
 =================================== -->

<!-- atomicrmw -->
<value key="latency::atomicrmw">
	<size>1</size>
</value>

<value key="reciprocal::atomicrmw">
	<real>8</real>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Cast Operations
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ==================================
 = trunc
 =================================== -->

<value key="latency::trunc">
	<size>1</size>
</value>

<value key="reciprocal::trunc">
	<real>1</real>
</value>

<!-- ==================================
 = zext
 =================================== -->

<value key="latency::zext">
	<size>1</size>
</value>

<value key="reciprocal::zext">
	<real>1</real>
</value>

<!-- ==================================
 = sext
 =================================== -->

<value key="latency::sext">
	<size>1</size>
</value>

<value key="reciprocal::sext">
	<real>1</real>
</value>

<!-- ==================================
 = fptoui
 =================================== -->

<value key="latency::fptoui">
	<size>1</size>
</value>

<value key="reciprocal::fptoui">
	<real>1</real>
</value>

<!-- ==================================
 = fptosi
 =================================== -->

<value key="latency::fptosi">
	<size>1</size>
</value>

<value key="reciprocal::fptosi">
	<real>1</real>
</value>

<!-- ==================================
 = uitofp
 =================================== -->

<value key="latency::uitofp">
	<size>1</size>
</value>

<value key="reciprocal::uitofp">
	<real>1</real>
</value>

<!-- ==================================
 = sitofp
 =================================== -->

<value key="latency::sitofp">
	<size>1</size>
</value>

<value key="reciprocal::sitofp">
	<real>1</real>
</value>

<!-- ==================================
 = fptrunc
 =================================== -->

<value key="latency::fptrunc">
	<size>1</size>
</value>

<value key="reciprocal::fptrunc">
	<real>1</real>
</value>

<!-- ==================================
 = fpext
 =================================== -->

<value key="latency::fpext">
	<size>1</size>
</value>

<value key="reciprocal::fpext">
	<real>1</real>
</value>

<!-- ==================================
 = ptrtoint
 =================================== -->

<value key="latency::ptrtoint">
	<size>1</size>
</value>

<value key="reciprocal::ptrtoint">
	<real>1</real>
</value>

<!-- ==================================
 = inttoptr
 =================================== -->

<value key="latency::inttoptr">
	<size>1</size>
</value>

<value key="reciprocal::inttoptr">
	<real>1</real>
</value>

<!-- ==================================
 = bitcast
 =================================== -->

<value key="latency::bitcast">
	<size>1</size>
</value>

<value key="reciprocal::bitcast">
	<real>1</real>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Other Operations
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ==================================
 = icmp
 =================================== -->

<value key="latency::icmp">
	<size>1</size>
</value>

<value key="reciprocal::icmp">
	<real>0.25</real>
</value>

<!-- ==================================
 = fcmp
 =================================== -->

<value key="latency::fcmp">
	<size>1</size>
</value>

<value key="reciprocal::fcmp">
	<real>0.25</real>
</value>

<!-- ==================================
 = phi
 =================================== -->

<!-- phi -->
<value key="latency::phi">
	<size>1</size>
</value>

<value key="reciprocal::phi">
	<real>1</real>
</value>

<!-- ==================================
 = call
 =================================== -->

<value key="latency::call">
	<size>2</size>
</value>

<value key="reciprocal::call">
	<real>2</real>
</value>

<!-- ==================================
 = select
 =================================== -->

<value key="latency::select">
	<size>1</size>
</value>

<value key="reciprocal::select">
	<real>0.5</real>
</value>

<!-- ==================================
 = useop1
 =================================== -->

<value key="latency::userop1">
	<size>1</size>
</value>

<value key="reciprocal::useop1">
	<real>1</real>
</value>

<!-- ==================================
 = userop2
 =================================== -->

<value key="latency::userop2">
	<size>1</size>
</value>

<value key="reciprocal::userop2">
	<real>1</real>
</value>

<!-- ==================================
 = vaarg
 =================================== -->

<value key="latency::vaarg">
	<size>1</size>
</value>

<value key="reciprocal::vaarg">
	<real>1</real>
</value>

<!-- ==================================
 = extractelement
 =================================== -->

<value key="latency::extractelement">
	<size>1</size>
</value>

<value key="reciprocal::extractelement">
	<real>1</real>
</value>

<!-- ==================================
 = insertelement
 =================================== -->

<value key="latency::insertelement">
	<size>1</size>
</value>

<value key="reciprocal::insertelement">
	<real>1</real>
</value>

<!-- ==================================
 = shufflevector
 =================================== -->

<value key="latency::shufflevector">
	<size>1</size>
</value>

<value key="reciprocal::shufflevector">
	<real>1</real>
</value>

<!-- ==================================
 = extractvalue
 =================================== -->

<value key="latency::extractvalue">
	<size>1</size>
</value>

<value key="reciprocal::extractvalue">
	<real>0.5</real>
</value>

<!-- ==================================
 = insertvalue
 =================================== -->

<value key="latency::insertvalue">
	<size>1</size>
</value>

<value key="reciprocal::insertvalue">
	<real>0.5</real>
</value>

<!-- ==================================
 = landingpad
 =================================== -->

<value key="latency::landingpad">
	<size>1</size>
</value>

<value key="reciprocal::landingpad">
	<real>1</real>
</value>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 + Call Operations
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- ==================================
 = malloc
 =================================== -->

<!-- pointer -->
<value key="latency::malloc::pointer">
	<size>1</size>
</value>

<value key="reciprocal::malloc::pointer">
	<real>1</real>
</value>

<!-- ==================================
 = free
 =================================== -->

<!-- pointer -->
<value key="latency::free::pointer">
	<size>1</size>
</value>

<value key="reciprocal::free::pointer">
	<real>1</real>
</value>

<!-- ==================================
 = fabs
 =================================== -->

<!-- float -->
<value key="latency::fabsf::float">
	<size>1</size>
</value>

<value key="reciprocal::fabsf::float">
	<real>1</real>
</value>

<!-- double -->
<value key="latency::fabs::double">
	<size>1</size>
</value>

<value key="reciprocal::fabs::double">
	<real>1</real>
</value>

<!-- ==================================
 = sqrt
 =================================== -->

<!-- float -->
<value key="latency::sqrt::float">
	<size>16.5</size>
</value>

<value key="reciprocal::sqrt::float">
	<real>12.5</real>
</value>

<!-- float -->
<value key="latency::sqrtf::float">
	<size>16.5</size>
</value>

<value key="reciprocal::sqrtf::float">
	<real>12.5</real>
</value>

<!-- double -->
<value key="latency::sqrt::double">
	<size>16.5</size>
</value>

<value key="reciprocal::sqrt::double">
	<real>12.5</real>
</value>

<!-- vector -->
<value key="latency::sqrt::vector">
	<size>11</size>
</value>

<value key="reciprocal::sqrt::vector">
	<real>7</real>
</value>

<!-- ==================================
 = rsqrt
 =================================== -->

<!-- float -->
<value key="latency::rsqrt::float">
	<size>16.5</size>
</value>

<value key="reciprocal::rsqrt::float">
	<real>12.5</real>
</value>

<!-- double -->
<value key="latency::rsqrt::double">
	<size>16.5</size>
</value>

<value key="reciprocal::rsqrt::double">
	<real>12.5</real>
</value>

<!-- vector -->
<value key="latency::rsqrt::vector">
	<size>11</size>
</value>

<value key="reciprocal::rsqrt::vector">
	<real>7</real>
</value>

<!-- ==================================
 = hadd
 =================================== -->

<!-- float -->
<value key="latency::hadd::float">
	<size>1</size>
</value>

<value key="reciprocal::hadd::float">
	<real>0.25</real>
</value>

<!-- double -->
<value key="latency::hadd::double">
	<size>1</size>
</value>

<value key="reciprocal::hadd::double">
	<real>0.25</real>
</value>

<!-- vector -->
<value key="latency::hadd::vector">
	<size>3</size>
</value>

<value key="reciprocal::hadd::vector">
	<real>2</real>
</value>

<!-- ==================================
 = log
 =================================== -->

<!-- float -->
<value key="latency::log::float">
	<size>58</size>
</value>

<value key="reciprocal::log::float">
	<real>1</real>
</value>

<!-- double -->
<value key="latency::log::double">
	<size>58</size>
</value>

<value key="reciprocal::log::double">
	<real>1</real>
</value>

<!-- vector -->
<value key="latency::log::vector">
	<size>58</size>
</value>

<value key="reciprocal::log::vector">
	<real>1</real>
</value>

<!-- ==================================
 = pow
 =================================== -->

<!-- float -->
<value key="latency::pow::float">
	<size>120</size>
</value>

<value key="reciprocal::pow::float">
	<real>1</real>
</value>

<!-- double -->
<value key="latency::pow::double">
	<size>120</size>
</value>

<value key="reciprocal::pow::double">
	<real>1</real>
</value>

<!-- vector -->
<value key="latency::pow::vector">
	<size>120</size>
</value>

<value key="reciprocal::pow::vector">
	<real>1</real>
</value>

<!-- ==================================
 = rand
 =================================== -->

<!-- float -->
<value key="latency::rand::integer">
	<size>1</size>
</value>

<value key="reciprocal::rand::integer">
	<real>320</real>
</value>

<!-- ==================================
 = printf
 =================================== -->

<!-- integer -->
<value key="latency::printf::integer">
	<size>1</size>
</value>

<value key="reciprocal::printf::integer">
	<real>1</real>
</value>

</root>
